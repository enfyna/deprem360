'use client';
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import 'leaflet/dist/leaflet.css';
import { ThemeProvider } from "@/components/theme-provider";
import { Header } from "@/components/ui/Header";
import { createContext, use, useEffect, useState } from "react";
import api from "@/lib/axios";
import { locationStore } from "./AppStore";
import { observer } from "mobx-react";

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

// export const metadata: Metadata = {
// title: "Create Next App",
// description: "Generated by create next app",
// };

const RootLayoutComponent = ({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) => {

    useEffect(() => {
        locationStore.fetchLocations();
    }, []);

    if(locationStore.loading) {
        // shadcn/ui loading spinner or skeleton
        return (
            <html lang="en" suppressHydrationWarning>
            <body
                className={`${geistSans.variable} ${geistMono.variable} w-full flex items-center flex-col antialiased`}
            >
            <div className="flex items-center justify-center w-full h-screen">
                <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500"></div>
            </div>
            </body>
        </html>
        );
    }

    return (
        <html lang="en" suppressHydrationWarning>
            <body
                className={`${geistSans.variable} ${geistMono.variable} w-full flex items-center flex-col antialiased`}
            >
                    <ThemeProvider
                        attribute="class"
                        defaultTheme="system"
                        enableSystem
                        disableTransitionOnChange
                    >
                        <Header></Header>
                        {children}
                    </ThemeProvider>
            </body>
        </html>
    );
};

 const RootLayout = observer(RootLayoutComponent);
 export default RootLayout;
